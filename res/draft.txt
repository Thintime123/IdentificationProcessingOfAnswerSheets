### Project Approach

The goal of this project is to implement automatic answer sheet recognition and grading using OpenCV and Matplotlib, along with generating feedback charts. The general workflow is as follows:

1. **Image Loading and Preprocessing**:
   - The image is loaded using OpenCV and converted to grayscale to simplify further processing.
   - Gaussian blur (`cv.GaussianBlur`) is applied to remove noise and smoothen the image.
   - Canny edge detection (`cv.Canny`) is used to detect edges in the image, highlighting the contours of the answer sheet.

2. **Contour Detection and Perspective Transformation**:
   - `cv.findContours` is used to detect all contours in the image, and they are sorted by area to identify the largest contour, which corresponds to the boundary of the answer sheet.
   - A perspective transformation (`four_point_transform`) is applied to extract the answer sheet region from the original image, ensuring that the subsequent processing focuses on the front-facing view.

3. **Answer Region Detection**:
   - The extracted answer sheet image undergoes thresholding (Otsu’s binarization) to separate the answer regions.
   - The contours of the answer regions are found, and only those with a specific size ratio (e.g., a 1:1 aspect ratio) are retained.

4. **Option Recognition and Grading**:
   - The option regions (typically bubbles or rectangular boxes) for each question are extracted, and the number of black pixels in each option region is counted to determine whether the option has been selected.
   - If the filled pixels of an option exceed a threshold (450 pixels), it is considered selected. If multiple options are selected for a question, the answer is marked as invalid.
   - The selected answer is compared to the standard answers (`ANSWER_KEY_SCORE`), and correct answers are counted. The accuracy is then calculated and reported.

5. **Feedback and Results Export**:
   - Using OpenCV, the correct and incorrect answers are marked on the answer sheet image (green for correct, red for incorrect).
   - Matplotlib is used to generate bar charts and pie charts displaying the score distribution and question performance.
   - The answers of each student are exported to an Excel file using Pandas for further analysis.

6. **Batch Processing and Completion**:
   - Multiple answer sheets are processed in batch (`work` function), and feedback results are generated.
   - The final score reports and feedback charts are generated, along with summary information for teachers or administrators to review.

---

### Key Steps and Implementation Details

1. **Image Preprocessing**:
   - Convert the image to grayscale: This simplifies computation by removing color information.
   - Gaussian blur: This reduces noise, which helps edge detection algorithms to focus on the main features.
   - Edge detection: The Canny algorithm is used to detect edges in the image, helping to identify the contours of the answer sheet.

2. **Contour Detection and Perspective Transformation**:
   - `cv.findContours` detects the contours in the image, and based on geometric properties (quadrilateral shape), it identifies the answer sheet region.
   - Perspective transformation extracts the answer sheet, ensuring that subsequent processing operates on a frontal view.

3. **Option Region Extraction and Evaluation**:
   - For each question, the bounding rectangle for each option is calculated using `cv.boundingRect`, and valid answer boxes are selected based on their aspect ratio.
   - The number of filled pixels in each option region is counted using `cv.countNonZero`. If the filled pixels exceed a certain threshold, the option is considered selected.

4. **Results Calculation and Feedback**:
   - The selected answers are compared with the standard answer key (`ANSWER_KEY_SCORE`) to determine correctness, and the number of correct answers is counted.
   - The selected answers are marked on the image, and the accuracy is calculated and displayed on the answer sheet.

5. **Visualization and Results Export**:
   - Matplotlib is used to create bar charts and pie charts displaying score distribution across different ranges.
   - The results of each student are saved in an Excel file for easy analysis.

6. **Batch Processing**:
   - Multiple answer sheets are processed in sequence, generating individual feedback for each sheet and compiling statistical charts at the end.

---

### Summary

This project utilizes OpenCV for automatic recognition and grading of answer sheets and Matplotlib for visualizing grading data. Through image processing techniques such as edge detection, contour extraction, perspective transformation, and pixel counting, the system accurately identifies the answer regions and selected options on answer sheets. The project generates detailed feedback in the form of graded answer sheets, Excel reports, and graphical charts to assist in the analysis of student performance. 

If you have more specific questions or would like to optimize certain steps, further details can be provided.

### 项目思路

这个项目的目标是通过 OpenCV 和 Matplotlib 实现自动识别答题卡，评分并生成反馈图表。大致流程如下：

1. **加载和预处理图像**：
   - 使用 OpenCV 加载图像，将其转换为灰度图像来简化后续的处理。
   - 对图像应用高斯模糊（`cv.GaussianBlur`）来去除噪声。
   - 使用 Canny 边缘检测（`cv.Canny`）获取图像中的边缘，突出答题卡的轮廓。

2. **轮廓检测与透视变换**：
   - 使用 `cv.findContours` 找到图像中的所有轮廓，并根据轮廓的面积对其进行排序，识别出最大且接近矩形的轮廓，即答题卡的边界。
   - 使用透视变换（`four_point_transform`）将答题卡的区域从原图中提取出来，使得后续的处理可以专注于正视图。

3. **答题区域检测**：
   - 对提取的答题卡图像进行阈值处理（Otsu 二值化）来分离答题区域。
   - 找到答题区域的轮廓，并对这些轮廓进行筛选，仅保留符合特定尺寸比例的答题框（例如，宽高比接近 1 的矩形）。

4. **选项识别与评分**：
   - 将每道题的选项区域（通常是气泡或矩形框）提取出来，通过计算每个选项区域内的黑色像素数（即填涂部分）来判断该选项是否被选中。
   - 如果某个选项的填涂像素超过某个阈值（450 像素），则认为该选项被选中。如果多个选项被选中，则认为该题答案无效。
   - 与标准答案（`ANSWER_KEY_SCORE`）进行比对，统计答对的题目，计算正确率并反馈。

5. **反馈与结果导出**：
   - 使用 OpenCV 在答题卡图像上标记正确和错误的选项（绿色为正确，红色为错误）。
   - 使用 Matplotlib 绘制答题卡评分的柱状图和饼状图，显示分数分布和答题情况。
   - 使用 Pandas 将每个学生的答题结果导出到 Excel 表格中，方便后续分析。

6. **批量处理与结束**：
   - 对多张答题卡进行批量处理（`work` 函数），并生成反馈结果。
   - 最终生成评分报告、反馈图表，并输出总结信息，供老师或管理人员查看。

---

### 关键步骤与实现细节

1. **图像预处理**
   - 将图像转换为灰度图像：简化计算，去除颜色信息。
   - 高斯模糊处理：减少噪声对边缘检测的干扰。
   - 边缘检测：使用 Canny 算法检测图像中的边缘，有助于找出答题卡的轮廓。

2. **轮廓检测与透视变换**
   - 使用 `cv.findContours` 查找图像中的轮廓，然后根据轮廓的几何形状（四边形）判断是否为答题卡区域。
   - 透视变换将答题卡区域提取出来，确保后续处理的区域是正视图。

3. **选项区域的提取与判断**
   - 在答题区域内，使用 `cv.boundingRect` 计算每个选项的边界框，并通过宽高比筛选出有效的选项框。
   - 通过像素统计（`cv.countNonZero`）判断哪些选项被选中，若填涂部分超过阈值，则认为该选项被选择。

4. **结果计算与反馈**
   - 根据标准答案 `ANSWER_KEY_SCORE` 判断每道题的答案是否正确，统计正确答案数。
   - 在图像上标记选中的答案，并计算答对的比例，显示在答题卡上。
   - 计算正确率并生成相应的反馈文本。

5. **可视化与导出结果**
   - 使用 Matplotlib 绘制分数统计的柱状图和饼状图，显示不同分数区间的人数分布。
   - 将每个学生的答题情况存储在 Excel 表格中，便于后续数据分析。

6. **批量处理**
   - 循环处理多张答题卡，生成所有答题卡的反馈报告，最后生成总分和各类统计图表。

---

### 总结

本项目利用 OpenCV 完成了答题卡的自动识别和评分，并使用 Matplotlib 可视化评分数据。通过图像处理技术，如边缘检测、轮廓提取、透视变换和像素统计，准确地识别了答题卡的答题区域和选项内容。最终，项目将评分结果导出为 Excel 文件，并通过图表展示分数分布，便于分析。

如果你有更多具体问题或希望进一步优化某些步骤，可以提供更详细的需求。